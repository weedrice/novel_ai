'use client';

import { useState, useEffect, useCallback } from 'react';
import ReactFlow, {
  Node,
  Edge,
  Controls,
  Background,
  useNodesState,
  useEdgesState,
  addEdge,
  Connection,
  MarkerType,
} from 'reactflow';
import 'reactflow/dist/style.css';

const API = process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:8080';

export default function GraphPage() {
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [selectedNode, setSelectedNode] = useState<any>(null);
  const [selectedEdge, setSelectedEdge] = useState<any>(null);

  const onConnect = useCallback(
    (params: Connection) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  const fetchGraphData = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(`${API}/relationships/graph`);
      if (!response.ok) throw new Error(`HTTP ${response.status}`);
      const data = await response.json();

      // Transform nodes for React Flow
      const flowNodes: Node[] = data.nodes.map((node: any, index: number) => ({
        id: node.id,
        type: 'default',
        position: {
          x: Math.cos((index / data.nodes.length) * 2 * Math.PI) * 350 + 500,
          y: Math.sin((index / data.nodes.length) * 2 * Math.PI) * 350 + 400,
        },
        data: {
          label: node.label,
          ...node,
        },
        style: {
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          color: 'white',
          border: '3px solid #5a67d8',
          borderRadius: '15px',
          padding: '20px 30px',
          fontSize: '18px',
          fontWeight: 'bold',
          boxShadow: '0 10px 25px rgba(0,0,0,0.3)',
          minWidth: '120px',
          textAlign: 'center',
        },
      }));

      // Transform edges for React Flow
      const flowEdges: Edge[] = data.edges.map((edge: any) => ({
        id: edge.id,
        source: edge.source,
        target: edge.target,
        label: `${edge.label} (${edge.closeness?.toFixed(1) || 'N/A'})`,
        type: 'smoothstep',
        animated: true,
        markerEnd: {
          type: MarkerType.ArrowClosed,
        },
        data: edge,
        style: {
          stroke: '#888',
          strokeWidth: 2,
        },
      }));

      setNodes(flowNodes);
      setEdges(flowEdges);
    } catch (err: any) {
      setError(`그래프 데이터 로드 실패: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchGraphData();
  }, []);

  const onNodeClick = useCallback((_: any, node: Node) => {
    setSelectedNode(node.data);
    setSelectedEdge(null);
  }, []);

  const onEdgeClick = useCallback((_: any, edge: Edge) => {
    setSelectedEdge(edge.data);
    setSelectedNode(null);
  }, []);

  const onPaneClick = useCallback(() => {
    setSelectedNode(null);
    setSelectedEdge(null);
  }, []);

  return (
    <div style={{ display: 'flex', height: '100vh', width: '100%' }}>
      {/* 메인 그래프 영역 */}
      <div style={{ flex: 1, position: 'relative' }}>
        <div
          style={{
            position: 'absolute',
            top: 20,
            left: 20,
            zIndex: 10,
            background: 'white',
            padding: '15px',
            borderRadius: '8px',
            boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
          }}
        >
          <h1 style={{ margin: 0, fontSize: '24px', marginBottom: '10px' }}>
            캐릭터 관계 그래프
          </h1>
          <button
            onClick={fetchGraphData}
            disabled={loading}
            style={{
              padding: '10px 20px',
              fontSize: '14px',
              cursor: loading ? 'not-allowed' : 'pointer',
              backgroundColor: '#0070f3',
              color: 'white',
              border: 'none',
              borderRadius: '5px',
            }}
          >
            {loading ? '로딩 중...' : '새로고침'}
          </button>
        </div>

        {error && (
          <div
            style={{
              position: 'absolute',
              top: 100,
              left: 20,
              zIndex: 10,
              background: '#fee',
              color: '#c00',
              padding: '15px',
              borderRadius: '8px',
              maxWidth: '400px',
            }}
          >
            {error}
          </div>
        )}

        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          onConnect={onConnect}
          onNodeClick={onNodeClick}
          onEdgeClick={onEdgeClick}
          onPaneClick={onPaneClick}
          fitView
        >
          <Controls />
          <Background color="#aaa" gap={16} />
        </ReactFlow>
      </div>

      {/* 사이드바 - 상세 정보 */}
      <div
        style={{
          width: '350px',
          background: '#f9f9f9',
          padding: '20px',
          overflowY: 'auto',
          borderLeft: '1px solid #ddd',
        }}
      >
        <h2 style={{ marginTop: 0 }}>상세 정보</h2>

        {selectedNode && (
          <div
            style={{
              background: 'white',
              padding: '15px',
              borderRadius: '8px',
              marginBottom: '15px',
            }}
          >
            <h3 style={{ marginTop: 0, color: '#0070f3' }}>
              캐릭터: {selectedNode.label}
            </h3>
            <p>
              <strong>ID:</strong> {selectedNode.characterId}
            </p>
            <p>
              <strong>설명:</strong> {selectedNode.description || 'N/A'}
            </p>
            <p>
              <strong>성격:</strong> {selectedNode.personality || 'N/A'}
            </p>
          </div>
        )}

        {selectedEdge && (
          <div
            style={{
              background: 'white',
              padding: '15px',
              borderRadius: '8px',
              marginBottom: '15px',
            }}
          >
            <h3 style={{ marginTop: 0, color: '#10b981' }}>관계 정보</h3>
            <p>
              <strong>관계 유형:</strong> {selectedEdge.label}
            </p>
            <p>
              <strong>친밀도:</strong> {selectedEdge.closeness?.toFixed(1) || 'N/A'}
            </p>
            <p>
              <strong>설명:</strong> {selectedEdge.description || 'N/A'}
            </p>
          </div>
        )}

        {!selectedNode && !selectedEdge && (
          <div style={{ color: '#666', textAlign: 'center', marginTop: '40px' }}>
            <p>노드나 엣지를 클릭하여</p>
            <p>상세 정보를 확인하세요</p>
          </div>
        )}

        <div style={{ marginTop: '30px', color: '#666', fontSize: '14px' }}>
          <h4>사용 방법</h4>
          <ul style={{ paddingLeft: '20px' }}>
            <li>노드를 드래그하여 위치 조정</li>
            <li>마우스 휠로 줌 인/아웃</li>
            <li>노드/엣지 클릭 시 상세 정보 표시</li>
            <li>배경 클릭 시 선택 해제</li>
          </ul>
        </div>
      </div>
    </div>
  );
}