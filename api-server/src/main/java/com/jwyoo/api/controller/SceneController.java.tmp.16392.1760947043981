package com.jwyoo.api.controller;

import com.jwyoo.api.entity.Character;
import com.jwyoo.api.entity.Dialogue;
import com.jwyoo.api.entity.Scene;
import com.jwyoo.api.entity.ScenarioVersion;
import com.jwyoo.api.service.LlmClient;
import com.jwyoo.api.service.SceneService;
import com.jwyoo.api.service.ScenarioVersionService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * 장면 관련 REST API 컨트롤러
 */
@Slf4j
@RestController
@RequestMapping("/scenes")
@RequiredArgsConstructor
@CrossOrigin(origins = "*")
public class SceneController {

    private final SceneService sceneService;
    private final LlmClient llmClient;
    private final ScenarioVersionService scenarioVersionService;

    /**
     * 모든 장면 조회
     */
    @GetMapping
    public ResponseEntity<List<Scene>> getAllScenes() {
        log.info("GET /scenes - Fetching all scenes");
        List<Scene> scenes = sceneService.getAllScenes();
        return ResponseEntity.ok(scenes);
    }

    /**
     * 특정 장면 조회
     */
    @GetMapping("/{id}")
    public ResponseEntity<Map<String, Object>> getScene(@PathVariable Long id) {
        log.info("GET /scenes/{} - Fetching scene", id);
        Scene scene = sceneService.getSceneById(id);
        List<Character> participants = sceneService.getParticipants(scene);

        Map<String, Object> response = new HashMap<>();
        response.put("scene", scene);
        response.put("participants", participants);

        return ResponseEntity.ok(response);
    }

    /**
     * 에피소드별 장면 목록 조회
     */
    @GetMapping("/episode/{episodeId}")
    public ResponseEntity<List<Scene>> getScenesByEpisode(@PathVariable Long episodeId) {
        log.info("GET /scenes/episode/{} - Fetching scenes by episode", episodeId);
        List<Scene> scenes = sceneService.getScenesByEpisodeId(episodeId);
        return ResponseEntity.ok(scenes);
    }

    /**
     * 장면의 대사 목록 조회
     */
    @GetMapping("/{id}/dialogues")
    public ResponseEntity<List<Dialogue>> getDialogues(@PathVariable Long id) {
        log.info("GET /scenes/{}/dialogues - Fetching dialogues", id);
        List<Dialogue> dialogues = sceneService.getDialogues(id);
        return ResponseEntity.ok(dialogues);
    }

    /**
     * 장면의 시나리오 자동 생성
     */
    @PostMapping("/{id}/generate-scenario")
    public ResponseEntity<Map<String, Object>> generateScenario(
            @PathVariable Long id,
            @RequestParam(required = false, defaultValue = "openai") String provider,
            @RequestParam(required = false, defaultValue = "5") int dialogueCount
    ) {
        log.info("POST /scenes/{}/generate-scenario - Generating scenario with provider: {}", id, provider);

        Scene scene = sceneService.getSceneById(id);
        List<Character> participants = sceneService.getParticipants(scene);

        if (participants.isEmpty()) {
            Map<String, Object> error = new HashMap<>();
            error.put("error", "장면에 참여하는 캐릭터가 없습니다.");
            return ResponseEntity.badRequest().body(error);
        }

        // LLM 서버에 시나리오 생성 요청
        Map<String, Object> request = new HashMap<>();
        request.put("sceneDescription", scene.getDescription());
        request.put("location", scene.getLocation());
        request.put("mood", scene.getMood());
        request.put("participants", participants.stream()
                .map(c -> Map.of(
                        "characterId", c.getCharacterId(),
                        "name", c.getName(),
                        "personality", c.getPersonality() != null ? c.getPersonality() : "",
                        "speakingStyle", c.getSpeakingStyle() != null ? c.getSpeakingStyle() : ""
                ))
                .collect(Collectors.toList()));
        request.put("dialogueCount", dialogueCount);
        request.put("provider", provider);

        // TODO: LLM 서버에 시나리오 생성 요청 구현
        // 현재는 더미 응답 반환
        Map<String, Object> response = new HashMap<>();
        response.put("sceneId", id);
        response.put("generatedDialogues", List.of(
                Map.of("speaker", participants.get(0).getName(), "text", "이 대사는 LLM으로 생성될 예정입니다.", "order", 1),
                Map.of("speaker", participants.size() > 1 ? participants.get(1).getName() : participants.get(0).getName(),
                       "text", "네, 맞아요! 곧 구현될 거예요.", "order", 2)
        ));
        response.put("message", "시나리오 생성 기능은 LLM 서버 엔드포인트 구현 후 활성화됩니다.");

        return ResponseEntity.ok(response);
    }

    /**
     * 장면 생성
     */
    @PostMapping
    public ResponseEntity<Scene> createScene(@RequestBody Scene scene) {
        log.info("POST /scenes - Creating new scene");
        Scene created = sceneService.createScene(scene);
        return ResponseEntity.ok(created);
    }

    /**
     * 장면 수정
     */
    @PutMapping("/{id}")
    public ResponseEntity<Scene> updateScene(@PathVariable Long id, @RequestBody Scene scene) {
        log.info("PUT /scenes/{} - Updating scene", id);
        Scene updated = sceneService.updateScene(id, scene);
        return ResponseEntity.ok(updated);
    }

    /**
     * 장면 삭제
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteScene(@PathVariable Long id) {
        log.info("DELETE /scenes/{} - Deleting scene", id);
        sceneService.deleteScene(id);
        return ResponseEntity.noContent().build();
    }
}